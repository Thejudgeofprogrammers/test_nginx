user nginx;
worker_processes 1;

events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;
    error_log   /var/log/nginx/error.log;

    sendfile           on;
    tcp_nopush         on;
    tcp_nodelay        on;
    keepalive_timeout  65;
    gzip               on;

    server {
        listen       80;
        server_name  localhost;


        # Прокси всех запросов к бэкенду
        location / {
            proxy_pass       http://post_backend:4050;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Заголовки CORS
            add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Origin, X-Requested-With, Content-Type, Accept';
            add_header 'Access-Control-Allow-Credentials' 'true';

            # Настройки проксирования
            proxy_http_version  1.1;
            proxy_set_header    Connection '';
            proxy_buffering     off;
            proxy_read_timeout  60s;
        }

        # Прокси для /api/post с проверкой метода OPTIONS
        location /api/post {
            proxy_pass       http://post_backend:4050;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Если метод OPTIONS, возвращаем ответ с разрешенными CORS заголовками
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
                add_header 'Access-Control-Allow-Headers' 'Authorization, Origin, X-Requested-With, Content-Type, Accept';
                add_header 'Access-Control-Allow-Credentials' 'true';
                return 204;  # Ответ для preflight запроса
            }

            # Настройки проксирования
            proxy_http_version  1.1;
            proxy_set_header    Connection '';
            proxy_buffering     off;
            proxy_read_timeout  60s;
        }

        # Прокси для аутентификации
        location /api/auth/login {
            proxy_pass      http://auth_backend:4051;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Заголовки CORS
            add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Origin, X-Requested-With, Content-Type, Accept';
            add_header 'Access-Control-Allow-Credentials' 'true';

            # Настройки проксирования
            proxy_http_version  1.1;
            proxy_set_header    Connection '';
            proxy_buffering     off;
            proxy_read_timeout  60s;
        }

        location /api/auth/register {
            proxy_pass      http://auth_backend:4051;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Заголовки CORS
            add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Origin, X-Requested-With, Content-Type, Accept';
            add_header 'Access-Control-Allow-Credentials' 'true';

            # Настройки проксирования
            proxy_http_version  1.1;
            proxy_set_header    Connection '';
            proxy_buffering     off;
            proxy_read_timeout  60s;
        }

        # Прокси для профиля пользователя
        location /api/user {
            proxy_pass      http://user_backend:4052;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Заголовки CORS
            add_header 'Access-Control-Allow-Origin' 'http://localhost:3000' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
            add_header 'Access-Control-Allow-Headers' 'Authorization, Origin, X-Requested-With, Content-Type, Accept';
            add_header 'Access-Control-Allow-Credentials' 'true';

            # Настройки проксирования
            proxy_http_version  1.1;
            proxy_set_header    Connection '';
            proxy_buffering     off;
            proxy_read_timeout  60s;
        }

        # Прокси для всех остальных запросов
        location / {
            proxy_pass       http://frontend_backend:3000;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Настройки проксирования
            proxy_http_version  1.1;
            proxy_set_header    Connection '';
            proxy_buffering     off;
            proxy_read_timeout  60s;
        }

        # Обработка ошибок
        error_page  404 /404.html;
        location = /404.html {
            internal;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }
}
